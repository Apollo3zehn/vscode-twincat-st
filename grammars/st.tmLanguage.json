{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Structured Text",
  "scopeName": "source.st",
  "fileTypes": ["st"],
  "uuid": "b8e7c7a0-7c2b-4e6e-9b7e-structured-text-tmgrammar",
  "patterns": [
    { "include": "#comments" },
    { "include": "#strings" },
    { "include": "#keywords" },
    { "include": "#numbers" },
    { "include": "#typedefs" },
    { "include": "#types" },
    { "include": "#sections" },
    { "include": "#functions" },
    { "include": "#properties" },
    { "include": "#methods" },
    { "include": "#operators" },
    { "include": "#identifiers" }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.st",
          "begin": "//",
          "beginCaptures": { "0": { "name": "punctuation.definition.comment.st" } },
          "end": "$"
        },
        {
          "name": "comment.block.st",
          "begin": "/\\*",
          "end": "\\*/"
        },
        {
          "name": "comment.block.st",
          "begin": "\\(\\*",
          "end": "\\*\\)"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.st",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            { "name": "constant.character.escape.st", "match": "\\\\." }
          ]
        },
        {
          "name": "string.quoted.single.st",
          "begin": "'",
          "end": "'",
          "patterns": [
            { "name": "constant.character.escape.st", "match": "\\\\." }
          ]
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "storage.type.class.st",
          "match": "\\b(PROGRAM|END_PROGRAM|FUNCTION_BLOCK|END_FUNCTION_BLOCK|FUNCTION|END_FUNCTION|PROPERTY|END_PROPERTY|METHOD|END_METHOD|INTERFACE|END_INTERFACE|STRUCT|END_STRUCT|TYPE|END_TYPE|VAR|VAR_INPUT|VAR_OUTPUT|VAR_IN_OUT|VAR_TEMP|VAR_EXTERNAL|VAR_GLOBAL|VAR_INST|VAR_STAT|END_VAR|GET|END_GET|SET|END_SET|IMPLEMENTS|EXTENDS|REFERENCE TO|MOD|ABSTRACT|FINAL|CONSTANT|PUBLIC|PRIVATE|PROTECTED|INTERNAL)\\b"
        },
        {
          "name": "keyword.control.st",
          "match": "\\b(IF|THEN|ELSIF|ELSE|END_IF|CASE|OF|END_CASE|WHILE|DO|END_WHILE|REPEAT|UNTIL|END_REPEAT|FOR|TO|BY|END_FOR|RETURN|EXIT|CONTINUE)\\b"
        },
        {
          "name": "constant.language.boolean.st",
          "match": "\\b(TRUE|FALSE)\\b"
        }
      ]
    },
    "numbers": {
      "patterns": [
        { "name": "constant.numeric.hex.st", "match": "\\b16#[0-9A-Fa-f_]+\\b" },
        { "name": "constant.numeric.float.st", "match": "\\b\\d+\\.\\d+([eE][\\-+]?\\d+)?\\b" },
        { "name": "constant.numeric.integer.st", "match": "\\b\\d+\\b" },
        { "name": "constant.numeric.integer.st", "match": "\\b(2|8|16)#[0-9A-Fa-f_]+\\b" },
        { "name": "constant.numeric.integer.st", "match": "\\b(BYTE|D?WORD|L?WORD|U?(S|D|L)?INT)#(2|8|16)?#[0-9A-Fa-f_]+\\b" }
      ]
    },
    "typedefs": {
      "patterns": [
        {
          "begin": "(?<=\\bTYPE\\b\\s*)([A-Za-z_][A-Za-z0-9_]+)\\s*:",
          "beginCaptures": {
            "1": { "name": "support.type.st" }
          },
          "end": "(?=\\bEND_TYPE\\b)",
          "patterns": [
            { "include": "#enums" }
          ]
        }
      ]
    },
    "enums": {
      "patterns": [
        {
          "begin": "\\(",
          "end": "\\)\\s*(?:(\\w+)\\s*)?(?:(:=)\\s*(\\w+))?;",
          "endCaptures": {
            "1": { "name": "support.type.st" },
            "2": { "name": "keyword.operator" },
            "3": { "name": "variable.other.enummember" }
          },
          "patterns": [
            {
              "name": "variable.other.enummember",
              "match": "^\\s*\\b[A-Za-z_][A-Za-z0-9_]*\\b(?=\\s*(,|:=))"
            },
            { "include": "#operators" },
            { "include": "#numbers" },
            { "include": "#types" },
            { "include": "#identifiers" }
          ]
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "support.type.st",
          "match": "(?<=\\b(FUNCTION_BLOCK|PROGRAM|FUNCTION|INTERFACE|STRUCT|CLASS)\\s+)([a-zA-Z_][a-zA-Z0-9_]*)"
        },
        {
          "name": "support.type.st",
          "match": "(?<=\\bIMPLEMENTS\\s+)([a-zA-Z_][a-zA-Z0-9_]*)(?=\\s*(,|EXTENDS|$))"
        },
        {
          "name": "support.type.st",
          "match": "(?<=,\\s*)([a-zA-Z_][a-zA-Z0-9_]*)(?=\\s*(,|EXTENDS|$))"
        },
        {
          "name": "support.type.st",
          "match": "(?<=\\bEXTENDS\\s+)([a-zA-Z_][a-zA-Z0-9_]*)"
        },
        {
          "name": "storage.type.st",
          "match": "\\b(INT|REAL|BOOL|STRING|DINT|BYTE|WORD|DWORD|SINT|USINT|UINT|UDINT|LINT|ULINT|LREAL|TIME|DATE|TIME_OF_DAY|DATE_AND_TIME)\\b"
        },
        {
          "name": "support.type.st",
          "match": "(?<=:\\s*)([a-zA-Z_][a-zA-Z0-9_]*)"
        }
      ]
    },
    "sections": {
      "patterns": [
        {
          "name": "meta.section.var_input.st",
          "begin": "\\bVAR_INPUT\\b",
          "end": "\\bEND_VAR\\b",
          "patterns": [
            { "include": "#identifiers" },
            { "include": "#types" }
          ]
        },
        {
          "name": "meta.section.var_output.st",
          "begin": "\\bVAR_OUTPUT\\b",
          "end": "\\bEND_VAR\\b",
          "patterns": [
            { "include": "#identifiers" },
            { "include": "#types" }
          ]
        },
        {
          "name": "meta.section.var.st",
          "begin": "\\bVAR\\b",
          "end": "\\bEND_VAR\\b",
          "patterns": [
            { "include": "#identifiers" },
            { "include": "#types" }
          ]
        }
      ]
    },
    "properties": {
      "patterns": [
        {
          "name": "meta.property.st",
          "begin": "\\bPROPERTY\\b\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
          "beginCaptures": {
            "1": { "name": "entity.name.property.st" }
          },
          "end": "\\bEND_PROPERTY\\b",
          "patterns": [
            { "include": "#keywords" },
            { "include": "#operators" },
            { "include": "#identifiers" }
          ]
        }
      ]
    },
    "operators": {
      "patterns": [
        { "name": "entity.name.function.st", "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=\\()" },
        { "name": "entity.name.function.st", "match": "\\.([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=\\()" },
        { "name": "keyword.operator.assignment.st", "match": ":=|=" },
        { "name": "keyword.operator.call.st", "match": "\\b[A-Za-z_][A-Za-z0-9_]*\\s*\\(" },
        { "name": "keyword.operator.member.st", "match": "\\." },
        { "name": "keyword.operator.arithmetic.st", "match": "\\+|\\-|\\*|\\/|MOD" },
        { "name": "keyword.operator.comparison.st", "match": "<=|>=|<>|<|>|=" },
        { "name": "keyword.other.st", "match": "\\b(AND|OR|XOR|NOT|SHL|SHR|ROL|ROR)\\b" }
      ]
    },
    "identifiers": {
      "patterns": [
        {
          "name": "variable.other.st",
          "match": "\\b[_a-zA-Z][_a-zA-Z0-9]*\\b"
        }
      ]
    }
  }
}