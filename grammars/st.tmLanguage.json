{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Structured Text",
  "scopeName": "source.st",
  "fileTypes": ["st"],
  "uuid": "b8e7c7a0-7c2b-4e6e-9b7e-structured-text-tmgrammar",
  "patterns": [
    { "include": "#comments" },
    { "include": "#varsections" },
    { "include": "#programs" },
    { "include": "#functions" },
    { "include": "#functionblocks" },
    { "include": "#interfaces" },
    { "include": "#typedefs" }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.st",
          "begin": "//",
          "beginCaptures": { "0": { "name": "punctuation.definition.comment.st" } },
          "end": "$"
        },
        {
          "name": "comment.block.st",
          "begin": "/\\*",
          "end": "\\*/"
        },
        {
          "name": "comment.block.st",
          "begin": "\\(\\*",
          "end": "\\*\\)"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.st",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            { "name": "constant.character.escape.st", "match": "\\\\." }
          ]
        },
        {
          "name": "string.quoted.single.st",
          "begin": "'",
          "end": "'",
          "patterns": [
            { "name": "constant.character.escape.st", "match": "\\\\." }
          ]
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "storage.type.class.st",
          "match": "\\b(PROGRAM|END_PROGRAM|FUNCTION_BLOCK|END_FUNCTION_BLOCK|FUNCTION|END_FUNCTION|PROPERTY|END_PROPERTY|METHOD|END_METHOD|INTERFACE|END_INTERFACE|STRUCT|END_STRUCT|TYPE|END_TYPE|VAR|VAR_INPUT|VAR_OUTPUT|VAR_IN_OUT|VAR_TEMP|VAR_EXTERNAL|VAR_GLOBAL|VAR_INST|VAR_STAT|END_VAR|GET|END_GET|SET|END_SET|IMPLEMENTS|EXTENDS|MOD|ABSTRACT|FINAL|CONSTANT|PUBLIC|PRIVATE|PROTECTED|INTERNAL)\\b"
        },
        {
          "name": "keyword.control.st",
          "match": "\\b(IF|THEN|ELSIF|ELSE|END_IF|CASE|OF|END_CASE|WHILE|DO|END_WHILE|REPEAT|UNTIL|END_REPEAT|FOR|TO|BY|END_FOR|RETURN|EXIT|CONTINUE)\\b"
        },
        {
          "name": "constant.language.boolean.st",
          "match": "\\b(TRUE|FALSE)\\b"
        }
      ]
    },
    "numbers": {
      "patterns": [
        { "name": "constant.numeric.float.scientific.st", "match": "\\b\\d+(?:\\.\\d+)?[eE][\\-+]?\\d+\\b" },
        { "name": "constant.numeric.hex.st", "match": "\\b(?:16#|(?:BYTE|D?WORD|L?WORD|U?(S|D|L)?INT)#16#)[0-9A-Fa-f_]+\\b" },
        { "name": "constant.numeric.octal.st", "match": "\\b(?:8#|(?:BYTE|D?WORD|L?WORD|U?(S|D|L)?INT)#8#)[0-7_]+\\b" },
        { "name": "constant.numeric.binary.st", "match": "\\b(?:2#|(?:BYTE|D?WORD|L?WORD|U?(S|D|L)?INT)#2#)[01_]+\\b" },
        { "name": "constant.numeric.typed.st", "match": "\\b(?:BYTE|D?WORD|L?WORD|U?(S|D|L)?INT)#\\d+\\b" },
        { "name": "constant.numeric.float.st", "match": "\\b\\d+\\.\\d+\\b" },
        { "name": "constant.numeric.integer.st", "match": "\\b\\d+\\b" }
      ]
    },
    "times": {
      "name": "string.unquoted",
      "match": "T#[0-9]+[a-zA-Z]+"
    },
    "programs": {
      "patterns": [
        {
          "begin": "^\\s*(PROGRAM)\\s(.*)",
          "beginCaptures": {
            "1": { "name": "keyword.other.st" },
            "2": { "patterns": [{ "include": "#keywords"}, { "include": "#types"}] }
          },
          "end": "^\\s*END_PROGRAM\\s*$",
          "endCaptures": {
            "0": { "name": "storage.modifier.st" }
          },
          "patterns": [
            { "include": "#varsections" },
            { "include": "#statements" }
          ]
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "begin": "^\\s*(FUNCTION)\\s(.*)",
          "beginCaptures": {
            "1": { "name": "keyword.other.st" },
            "2": { 
              "patterns": [
                { "include": "#keywords"},
                { 
                  "match": ":\\s*(.*)",
                  "captures": {
                    "1": { "patterns": [{ "include": "#types" }] }
                  }
                },
                {
                  "match": "\\w+",
                  "name": "entity.name.function.st" 
                }
              ]
            }
          },
          "end": "^\\s*END_FUNCTION\\s*$",
          "endCaptures": {
            "0": { "name": "keyword.other.st" }
          },
          "patterns": [
            { "include": "#comments" },
            { "include": "#varsections" },
            { "include": "#statements" }
          ]
        }
      ]
    },
    "methods": {
      "patterns": [
        {
          "begin": "^\\s*(METHOD)\\s(.*)",
          "beginCaptures": {
            "1": { "name": "keyword.other.st" },
            "2": { 
              "patterns": [
                { "include": "#keywords"},
                { 
                  "match": ":\\s*(.*)",
                  "captures": {
                    "1": { "patterns": [{ "include": "#types" }] }
                  }
                },
                {
                  "match": "\\w+",
                  "name": "entity.name.function.member.st" 
                }
              ]
            }
          },
          "end": "^\\s*END_METHOD\\s*$",
          "endCaptures": {
            "0": { "name": "keyword.other.st" }
          },
          "patterns": [
            { "include": "#varsections" },
            { "include": "#statements" }
          ]
        }
      ]
    },
    "properties": {
      "patterns": [
        {
          "begin": "^\\s*(PROPERTY)\\s(.*)",
          "beginCaptures": {
            "1": { "name": "keyword.other.st" },
            "2": { 
              "patterns": [
                { "include": "#keywords"},
                { 
                  "match": ":\\s*(.*)",
                  "captures": {
                    "1": { "patterns": [{ "include": "#types" }] }
                  }
                },
                {
                  "match": "\\w+",
                  "name": "variable.other.property.st" 
                }
              ]
            }
          },
          "end": "^\\s*END_PROPERTY\\s*$",
          "endCaptures": {
            "0": { "name": "keyword.other.st" }
          },
          "patterns": [
            { "include": "#keywords" },
            { "include": "#statements" }
          ]
        }
      ]
    },
    "functionblocks": {
      "patterns": [
        {
          "begin": "^\\s*(FUNCTION_BLOCK)\\s(.*)",
          "beginCaptures": {
            "1": { "name": "keyword.other.st" },
            "2": { "patterns": [{ "include": "#keywords"}, { "include": "#types" }] }
          },
          "end": "^\\s*END_FUNCTION_BLOCK\\s*$",
          "endCaptures": {
            "0": { "name": "keyword.other.st" }
          },
          "patterns": [
            { "include": "#comments" },
            { "include": "#extends" },
            { "include": "#implements" },
            { "include": "#varsections" },
            { "include": "#properties" },
            { "include": "#methods" },
            { "include": "#statements" }
          ]
        }
      ]
    },
    "interfaces": {
      "patterns": [
        {
          "begin": "^\\s*(INTERFACE)\\s(.*)",
          "beginCaptures": {
            "1": { "name": "keyword.other.st" },
            "2": { "patterns": [{ "include": "#keywords"}, { "include": "#types" }] }
          },
          "end": "^\\s*END_INTERFACE\\s*$",
          "endCaptures": {
            "0": { "name": "keyword.other.st" }
          },
          "patterns": [
            { "include": "#comments" },
            { "include": "#properties" },
            { "include": "#methods" }
          ]
        }
      ]
    },
    "typedefs": {
      "patterns": [
        {
          "begin": "^\\s*(TYPE)\\s(.*)",
          "beginCaptures": {
            "1": { "name": "keyword.other.st" },
            "2": { "patterns": [{ "include": "#keywords"}, { "include": "#types" }] }
          },
          "end": "^\\s*END_TYPE\\s*$",
          "endCaptures": {
            "0": { "name": "keyword.other.st" }
          },
          "patterns": [
            { "include": "#enums" },
            { "include": "#structs" }
          ]
        }
      ]
    },
    "enums": {
      "patterns": [
        {
          "begin": "^\\s*\\(",
          "end": "^\\s*\\)(.*)",
          "endCaptures": {
            "1": { 
              "patterns": [
                { 
                  "match": "\\s*(\\w+)?(?:\\s*(:=)\\s*(\\w+))?",
                  "captures": {
                    "1": { "name": "storage.type.st" },
                    "2": { "name": "keyword.operator" },
                    "3": { "name": "variable.other.enummember" }
                  }
                }
              ]
            }
          },
          "patterns": [
            { "include": "#comments" },
            {
              "name": "variable.other.enummember",
              "match": "^\\s*\\b[A-Za-z_][A-Za-z0-9_]*\\b"
            },
            { "include": "#operators" },
            { "include": "#numbers" },
            { "include": "#types" },
            { "include": "#identifiers" }
          ]
        }
      ]
    },
    "structs": {
      "patterns": [
        {
          "begin": "^\\s*STRUCT",
          "beginCaptures": {
            "0": { "name": "keyword.other.st" }
          },
          "end": "^\\s*END_STRUCT",
          "endCaptures": {
            "0": { "name": "keyword.other.st" }
          },
          "patterns": [
            { "include": "#comments" },
            { "include": "#declarations" }
          ]
        }
      ]
    },
    "varsections": {
      "patterns": [
        {
          "begin": "^\\s*(VAR_INPUT|VAR_OUTPUT|VAR_INOUT|VAR_INST|VAR_GLOBAL|VAR)\\s(.*)",
          "beginCaptures": {
            "1": { "name": "keyword.other.st" },
            "2": { 
              "patterns": [
                { "include": "#keywords"},
                { "include": "#types" }
              ]
            }
          },
          "end": "^\\s*END_VAR\\s*$",
          "endCaptures": {
            "0": { "name": "keyword.other.st" }
          },
          "patterns": [
            { "include": "#comments" },
            { "include": "#declarations" }
          ]
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "storage.type.st",
          "match": "\\b(REFERENCE TO|INT|REAL|BOOL|STRING|DINT|BYTE|WORD|DWORD|SINT|USINT|UINT|UDINT|LINT|ULINT|LREAL|TIME|DATE|TIME_OF_DAY|DATE_AND_TIME)\\b"
        },
        {
          "name": "support.type.st",
          "match": "[a-zA-Z_][a-zA-Z0-9_]*"
        }
      ]
    },
    "statements": {
      "patterns": [
        { "include": "#comments" },
        { "include": "#keywords" },
        { "include": "#assignments" },
        { "include": "#calls" },
        { "include": "#operators" },
        { "include": "#identifiers" }
      ]
    },
    "calls": {
      "match": "(?:(.*)\\.)*(.*)\\((.*)\\);",
      "captures": {
        "1": { "patterns": [{ "include": "#identifiers" }] },
        "2": { "name": "entity.name.function.member.st" },
        "3": { "patterns": [{ "include": "#identifiers" }] }
      }
    },
    "extends": {
      "patterns": [
        {
          "match": "(EXTENDS)\\s*(.*)",
          "captures": {
            "1": { "name": "keyword.other.st" },
            "2": { "patterns": [{ "include": "#types" }] }
          }
        }
      ]
    },
    "implements": {
      "patterns": [
        {
          "match": "(IMPLEMENTS)\\s*(.*)",
          "captures": {
            "1": { "name": "keyword.other.st" },
            "2": { "patterns": [{ "include": "#types" }] }
          }
        }
      ]
    },
    "declarations": {
      "patterns": [
        {
          "match": "\\s*([^\\s]+)\\s*:\\s*([^;|:=]+)\\s*(?::=(.*))?",
          "captures": {
            "1": { "patterns": [{ "include": "#identifiers" }] },
            "2": { "patterns": [{ "include": "#types" }] },
            "3": { "patterns": [{ "include": "#expression" }] }
          }
        }
      ]
    },
    "assignments": {
      "patterns": [
        {
          "match": "^\\s*([^\\s]+)\\s*(:=|REF=)\\s*(.*)",
          "captures": {
            "1": { "patterns": [{ "include": "#identifiers" }] },
            "2": { "name": "keyword.operator.assignment.st" },
            "3": { "patterns": [{ "include": "#expression" }] }
          }
        }
      ]
    },
    "operators": {
      "patterns": [
        { "name": "keyword.operator.assignment.st", "match": ":=|=" },
        { "name": "keyword.operator.call.st", "match": "\\b[A-Za-z_][A-Za-z0-9_]*\\s*\\(" },
        { "name": "keyword.operator.member.st", "match": "\\." },
        { "name": "keyword.operator.arithmetic.st", "match": "\\+|\\-|\\*|\\/|MOD" },
        { "name": "keyword.operator.comparison.st", "match": "<=|>=|<>|<|>|=" },
        { "name": "keyword.other.st", "match": "\\b(AND|OR|XOR|NOT|SHL|SHR|ROL|ROR)\\b" }
      ]
    },
    "expression": {
      "patterns": [
        { "include": "#literals" },
        { "include": "#keywords" },
        { "include": "#operators" },
        { "include": "#identifiers" }
      ]
    },
    "literals": {
      "patterns": [
        { "include": "#strings" },
        { "include": "#times" },
        { "include": "#numbers" }
      ]
    },
    "identifiers": {
      "patterns": [
        {
          "name": "variable.language.this.st",
          "match": "THIS\\^"
        },
        {
          "name": "variable.other.st",
          "match": "\\b[_a-zA-Z][_a-zA-Z0-9]*\\b"
        }
      ]
    }
  }
}